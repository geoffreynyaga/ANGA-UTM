"""
This type stub file was generated by pyright.
"""

from faker import Generator
from faker.providers import BaseProvider

""" Integrate Faker to the Mixer. """
SMALLINT = 32768
GENRES = ('general', 'pop', 'dance', 'traditional', 'rock', 'alternative', 'rap', 'country', 'jazz', 'gospel', 'latin', 'reggae', 'comedy', 'historical', 'action', 'animation', 'documentary', 'family', 'adventure', 'fantasy', 'drama', 'crime', 'horror', 'music', 'mystery', 'romance', 'sport', 'thriller', 'war', 'western', 'fiction', 'epic', 'tragedy', 'parody', 'pastoral', 'culture', 'art', 'dance', 'drugs', 'social')
class MixerProvider(BaseProvider):
    """ Implement some mixer methods. """
    def __init__(self, generator) -> None:
        ...
    
    def load(self, providers=..., locale=...):
        ...
    
    def big_integer(self):
        """ Get a big integer.

        Get integer from -9223372036854775808 to 9223372036854775807.

        """
        ...
    
    def ip_generic(self, protocol=...):
        """ Get IP (v4 or v6) address.

        :param protocol:
            Set protocol to 'ipv4' or 'ipv6'. Generate either IPv4 or
            IPv6 address if none.

        """
        ...
    
    def positive_decimal(self, **kwargs):
        """ Get a positive decimal. """
        ...
    
    def positive_integer(self, max=...):
        """ Get a positive integer. """
        ...
    
    def small_integer(self, min=..., max=...):
        """ Get a positive integer. """
        ...
    
    def small_positive_integer(self, max=...):
        """ Get a positive integer. """
        ...
    
    @staticmethod
    def uuid():
        ...
    
    def genre(self):
        ...
    
    def percent(self):
        ...
    
    def percent_decimal(self):
        ...
    
    def title(self):
        ...
    
    def coordinates(self):
        ...
    
    def pybytes(self, size=...):
        ...
    


class MixerGenerator(Generator):
    """ Support dynamic locales switch. """
    def __init__(self, locale=..., providers=..., **config) -> None:
        ...
    
    def __getattr__(self, name):
        ...
    
    @property
    def providers(self):
        ...
    
    @providers.setter
    def providers(self, value):
        ...
    
    @property
    def locale(self):
        ...
    
    @locale.setter
    def locale(self, value):
        ...
    
    @property
    def env(self):
        ...
    
    def set_formatter(self, name, method):
        ...
    


faker = MixerGenerator()
