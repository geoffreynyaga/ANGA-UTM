"""
This type stub file was generated by pyright.
"""

import datetime as dt
from os import path
from django.core.files.base import ContentFile
from .. import _compat as _
from ..main import GenFactory as BaseFactory, Mixer as BaseMixer, TypeMixer as BaseTypeMixer, TypeMixerMeta as BaseTypeMixerMeta

""" Django support. """
get_contentfile = ContentFile
MOCK_FILE = path.abspath(path.join(path.dirname(path.dirname(__file__)), 'resources', 'file.txt'))
MOCK_IMAGE = path.abspath(path.join(path.dirname(path.dirname(__file__)), 'resources', 'image.gif'))
class UTCZone(dt.tzinfo):
    """ Implement UTC timezone. """
    utcoffset = ...
    tzname = ...


UTC = UTCZone()
def get_file(filepath=..., **kwargs):
    """ Generate a content file.

    :return ContentFile:

    """
    ...

def get_image(filepath=...):
    """ Generate a content image.

    :return ContentFile:

    """
    ...

def get_relation(_scheme=..., _typemixer=..., **params):
    """ Function description. """
    ...

def get_datetime(**params):
    """ Support Django TZ support. """
    ...

class GenFactory(BaseFactory):
    """ Map a django classes to simple types. """
    types = ...
    generators = ...


class TypeMixerMeta(BaseTypeMixerMeta):
    """ Load django models from strings. """
    def __new__(mcs, name, bases, params):
        """ Associate Scheme with Django models.

        Cache Django models.

        :return mixer.backend.django.TypeMixer: A generated class.

        """
        ...
    


class TypeMixer(_.with_metaclass(TypeMixerMeta, BaseTypeMixer)):
    """ TypeMixer for Django. """
    __metaclass__ = ...
    factory = ...
    def postprocess(self, target, postprocess_values):
        """ Fill postprocess_values. """
        ...
    
    def get_value(self, name, value):
        """ Set value to generated instance.

        :return : None or (name, value) for later use

        """
        ...
    
    def gen_select(self, field_name, select):
        """ Select exists value from database.

        :param field_name: Name of field for generation.

        :return : None or (name, value) for later use

        """
        ...
    
    def gen_field(self, field):
        """ Generate value by field.

        :param relation: Instance of :class:`Field`

        :return : None or (name, value) for later use

        """
        ...
    
    def make_fabric(self, field, fname=..., fake=..., kwargs=...):
        """ Make a fabric for field.

        :param field: A mixer field
        :param fname: Field name
        :param fake: Force fake data

        :return function:

        """
        ...
    
    @staticmethod
    def is_unique(field):
        """ Return True is field's value should be a unique.

        :return bool:

        """
        ...
    
    @staticmethod
    def is_required(field):
        """ Return True is field's value should be defined.

        :return bool:

        """
        ...
    
    def guard(self, *args, **kwargs):
        """ Look objects in database.

        :returns: A finded object or False

        """
        ...
    
    def reload(self, obj):
        """ Reload object from database. """
        ...
    


class Mixer(BaseMixer):
    """ Integration with Django. """
    type_mixer_cls = ...
    def __init__(self, commit=..., **params) -> None:
        """Initialize Mixer instance.

        :param commit: (True) Save object to database.

        """
        ...
    
    def postprocess(self, target):
        """ Save objects in db.

        :return value: A generated value

        """
        ...
    


mixer = Mixer()
